openapi: "3.0.0"
info:
  version: "0.0.5"
  title: "Champlain API Documentation"
  description: "Champlain Open API Documentation."
  contact:
    name: Champlain API
    url: "https://github.com/champlain-api/"
servers:
  - url: "http://localhost:3000/"
    
tags:
- name: shuttle
  description: Endpoints relating to the shuttle service.
- name: announcements
  description: Endpoints relating to announcements.
- name: faculty
  description: Endpoints related to faculty.
paths:
  "/shuttles":
    get:
      tags:
      - shuttle
      summary: "Get information relating to all shuttles"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shuttle'

  "/shuttles/{shuttleId}":
    get:
      tags:
      - shuttle
      summary: "Get information relating to specific shuttle"
      parameters:
        - in: path
          name: shuttleId
          description: ID of the shuttle. Any number is accepted starting from 0
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        404:
          description: "Invalid shuttleId"
        200:
        # TODO: Make schema for specific shuttle
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shuttle'

  "/announcements":
    get:
      tags:
      - announcements
      summary: "Returns any announcements"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/announcements'

  "/faculty":
    get:
      tags:
      - faculty
      summary: "Get all faculty data"
      description: "Returns a JSON list of all faculty members, including their title, departments, and photo URL"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faculty'

  "/faculty/{name}":
    get:
      tags:
      - faculty
      summary: "Get a faculty member by name"
      description: "Returns a faculty member including their title, departments, and photo URL"
      parameters:
      - in: path
        name: name
        description: "The name of the faculty member"
        required: true
        schema:
          type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
        404:
          description: "Faculty member not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Faculty member not found."

  "/faculty/department/{departmentName}":
    get:
      tags:
      - faculty
      summary: "Get faculty members by department"
      description: "Returns all faculty members within a department including their title and photo URL"
      parameters:
      - in: path
        name: departmentName
        example: "Core Division"
        description: "The name of the department"
        required: true
        schema:
          type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
        404:
          description: "Department not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Department not found."

components:
  schemas:
    announcements:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        summary:
          type: string
          description: The announcement text
        style:
          type: string
          enum:
            - info
            - emergency
        type:
          type: string
          enum:
            - Mobile
            - Shuttle
            - WWW
    shuttle:
      type: object
      properties:
        date_time:
          type: string
          format: date-time
        unitid:
          type: integer
          minimum: 0
          description: Shuttle number
        lat:
          type: number
          format: double
          description: Latitude
        lon:
          type: number
          format: double
          description: Longitude
        mph:
          type: integer
        direction:
          type: number
    faculty:
      type: object
      properties:
        name:
          description: "The faculty member's name"
          type: string
          example: "John Business"
        title:
          description: "The faculty member's title"
          type: string
          example: "Adjunct Instructor"
        departments:
          description: "The department(s) the faculty member is part of"
          type: array
          items:
            type: string
            example: "Stiller School of Business"
        imageUrl:
          type: string
          format: uri