#
# Copyright 2025 Champlain API Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: "3.0.0"
info:
  version: "0.0.8"
  title: "Champlain API Documentation"
  description: "Champlain Open API Documentation."
  contact:
    name: Champlain API
    url: "https://github.com/champlain-api/"
servers:
  - url: "http://localhost:3000/"

tags:
  - name: shuttle
    description: Endpoints relating to the shuttle service
  - name: announcements
    description: Endpoints relating to announcements
  - name: faculty
    description: Endpoints related to faculty
  - name: building
    description: Endpoints related to buildings

paths:
  "/shuttles":
    get:
      tags:
        - shuttle
      summary: "Get information relating to all shuttles"
      security: []
      parameters:
        - in: query
          name: updatedWithin
          description: Only show shuttles updated within the the last x hours.
          required: false
          schema:
            type: integer
            minimum: 1
            default: 2
            maximum: 168
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shuttle"
        404:
          description: "`updatedWithin` is invalid"
        500:
          description: "An error occurred"

  "/shuttles/{shuttleId}":
    get:
      tags:
        - shuttle
      summary: "Get information relating to specific shuttle."
      security: []
      parameters:
        - in: path
          name: shuttleId
          description: "ID of the shuttle. Any number is accepted starting from 0."
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        404:
          description: "Shuttle cannot be found."
        400:
          description: "Invalid shuttle ID specified."
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shuttle"

  "/shuttle":
    post:
      tags:
        - shuttle
      summary: "Create a new shuttle"
      description: "Requires the `SHUTTLE_EDIT` scope."
      security:
        - bearerAuth: []
      requestBody:
        description: "A shuttle object."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shuttle"
      responses:
        500:
          description: "Unable to create shuttle."
        400:
          description: "Unable to create shuttle. Please check that all fields are valid."
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shuttle"

  "/shuttle/{shuttleId}":
    put:
      summary: "Update an existing shuttle."
      description: "Requires the `SHUTTLE_EDIT` scope."
      tags:
        - shuttle
      security:
        - bearerAuth: []
      requestBody:
        description: "A shuttle object."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shuttle"
      responses:
        400:
          description: "The shuttle cannot be updated."
        200:
          description: OK
        401:
          description: "Not authorized."
    delete:
      tags:
        - shuttle
      summary: "Delete a shuttle."
      description: "Requires the `SHUTTLE_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: shuttleId
          description: "ID of the shuttle. Any number is accepted starting from 0."
          required: true
          schema:
            type: integer
      responses:
        401:
          description: "Not authorized."

  "/announcements":
    get:
      tags:
        - announcements
      summary: "Get current announcements."
      security: []
      parameters:
        - in: query
          name: type
          description: "Optional type of announcement to fetch."
          schema:
            type: string
            enum:
              - Mobile
              - Shuttle
              - WWW
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/announcements"
        400:
          description: "Invalid announcement type specified."
    post:
      tags:
        - announcements
      summary: "Make a new announcement"
      description: "Requires the `ANNOUNCEMENTS_EDIT` scope."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/announcements"
        400:
          description: "Invalid fields provided."
        500:
          description: "Unable to create announcement."
  "/announcements/{id}":
    get:
      tags:
        - announcements
      summary: "Get current announcement by id."
      security: []
      parameters:
        - in: path
          name: id
          description: "Announcement id."
          schema:
            type: integer
            required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/announcements"
        404:
          description: "Invalid id."
    put:
      tags:
        - announcements
      summary: "Edit an announcement"
      description: "Requires the `ANNOUNCEMENTS_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Announcement id."
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/announcements"
    delete:
      tags:
        - announcements
      summary: "Delete an announcement"
      description: "Requires the `ANNOUNCEMENTS_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Announcement id."
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/announcements"
        404:
          description: "Invalid id."

  "/faculty":
    get:
      tags:
        - faculty
      summary: "Get all faculty data."
      security: []
      description: "Returns a JSON list of all faculty members, including their title, departments, and photo URL."
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
    post:
      tags:
        - faculty
      summary: "Add a faculty member."
      description: "Requires the `FACULTY_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          description: "Faculty member name"
          schema:
            type: string
          required: true
        - in: query
          name: title
          description: "The faculty member's title"
          schema:
            type: string
          required: true
        - in: query
          name: department
          description: "The faculty member's department"
          schema:
            type: string
          required: true
        - in: query
          name: imageURL
          description: "The faculty member's image"
          schema:
            type: string
          required: true
      responses:
        201:
          description: "Created"
        400:
          description: "Unable to create faculty member. Please verify that all fields are valid."
        500:
          description: "Unable to create faculty member."
    put:
      tags:
        - faculty
      summary: "Update a faculty member."
      description: "Requires the `FACULTY_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          description: "Faculty member name"
          schema:
            type: string
          required: true
        - in: query
          name: title
          description: "The faculty member's title"
          schema:
            type: string
          required: true
        - in: query
          name: department
          description: "The faculty member's department"
          schema:
            type: string
          required: true
        - in: query
          name: imageURL
          description: "The faculty member's image"
          schema:
            type: string
          required: true
      responses:
        201:
          description: "Created"
        400:
          description: "Unable to create faculty member. Please verify that all fields are valid."
        500:
          description: "Unable to create faculty member."
  "/faculty/{id}":
    delete:
      tags:
        - faculty
      summary: "Add a faculty member."
      description: "Requires the `FACULTY_EDIT` scope."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Faculty member id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "OK"
        400:
          description: "An error occurred."
        404:
          description: "Invalid faculty id."
        500:
          description: "Unable to delete faculty member."

  "/faculty/{name}":
    get:
      tags:
        - faculty
      summary: "Get a faculty member by name."
      security: []
      description: "Returns a faculty member including their title, departments, and photo URL."
      parameters:
        - in: path
          name: name
          description: "The name of the faculty member."
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
        404:
          description: "Faculty member not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Faculty member not found."

  "/faculty/department/{departmentName}":
    get:
      tags:
        - faculty
      summary: "Get faculty members by department."
      security: []
      description: "Returns all faculty members within a department including their title and photo URL."
      parameters:
        - in: path
          name: departmentName
          example: "Core Division"
          description: "The name of the department"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
        404:
          description: "No faculty members found for this department."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No faculty members found for this department."
  "/building":
    get:
      tags:
        - building
      summary: "Get all buildings and their information."
      description: "Returns all buildings with their name, location, and hours."
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/building"
    post:
      tags:
        - building
      summary: "Create a new building"
      description: "Requires the `BUILDING_EDIT` scope."
      requestBody:
        description: "A building object."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/building"

  "/building/{id}":
    get:
      tags:
        - building
      summary: "Get information relating to a specific building."
      parameters:
        - in: path
          name: id
          description: "Building id"
          schema:
            type: integer
            required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/building"
    put:
      tags:
        - building
      summary: "Make or update a new building"
      description: "Requires the `BUILDING_EDIT` scope. All hours must be specified in the request."
      requestBody:
        description: "A building object."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/building"
    delete:
      tags:
        - building
      summary: "Delete a building"
      description: "Requires the `BUILDING_EDIT` scope. All hours must be specified in the request."
      parameters:
        - in: path
          name: id
          description: "Building id"
          schema:
            type: integer
            required: true

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    announcements:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        summary:
          type: string
          description: The announcement text
        style:
          type: string
          enum:
            - info
            - emergency
        type:
          type: string
          enum:
            - MOBILE
            - SHUTTLE
            - WWW
    shuttle:
      type: object
      properties:
        date_time:
          type: string
          format: date-time
        unitid:
          type: integer
          minimum: 0
          description: Shuttle number
        lat:
          type: number
          format: double
          description: Latitude
        lon:
          type: number
          format: double
          description: Longitude
        mph:
          type: integer
        direction:
          type: number
    faculty:
      type: object
      properties:
        name:
          description: "The faculty member's name"
          type: string
          example: "John Business"
        title:
          description: "The faculty member's title"
          type: string
          example: "Adjunct Instructor"
        departments:
          description: "The department(s) the faculty member is part of"
          type: array
          items:
            type: string
            example: "Stiller School of Business"
        imageUrl:
          type: string
          format: uri
    building:
      type: object
      properties:
        name:
          description: "The building's name"
          type: string
          example: "Joyce Hall"
        location:
          description: "Location of the building"
          example: "On campus"
          type: string
        hours:
          example:
            [
              { "day": "monday", "hours": "24/7" },
              { "day": "tuesday", "hours": "24/7" },
              { "day": "wednesday", "hours": "24/7" },
              { "day": "thursday", "hours": "24/7" },
              { "day": "friday", "hours": "24/7" },
              { "day": "saturday", "hours": "24/7" },
              { "day": "sunday", "hours": "24/7" },
            ]
          description: "The hours of the building (if applicable). All days and hours must be supplied."
          type: array
          items:
            type: object
            properties:
              day:
                type: string
                enum:
                  - monday
                  - tuesday
                  - wednesday
                  - thursday
                  - friday
                  - saturday
                  - sunday
              hours:
                type: string

security:
  - bearerAuth: []
